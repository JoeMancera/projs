en el principo, JS solo servia para hacer cosas simples en el navegdor
con la llegada de google y otras web apps esto cambió con el JS Engine así
1. Recibe el código fuente
2. Parcea el código y produce un Abstract Syntax Tree
3. Se complila a bytecode y se ejecuta
4. se optimiza a machine code y se reemplaza el código base

js source code -> parce -> AST (2) -> interpreter -> bytecode

que es un parce? 

código -> tokens -> AST
cuando falla sale el SyntaxError

es entre el 15 y 20 % del proceso de ejecución
la mayoria del JS escrito no se ejecuta
bundling y code splitting se hacen para optimizar y empaquetar nuestro códig de tal forma que seamás optimo


hay dos formas

Eyger -> se encuentran todos los errores de syntaxis, crea los AST y se contruye el scope
Lazy -> mucho más rápido, no crea los AST y contruye los scopes parcialmente

en esprima.org podemos visualizar los tokens que genera un codigo JS por ejemplo:

para 
    let foo = 6;

se crean los siguientes tokens:
[
    {
        "type": "Keyword",
        "value": "let"
    },
    {
        "type": "Identifier",
        "value": "foo"
    },
    {
        "type": "Punctuator",
        "value": "="
    },
    {
        "type": "Numeric",
        "value": "6"
    }
]

AST es una estructura en forma de arbol para representar el programa
es muy similar a la estructura HTML en el DOM

para el programa
    let foo = "bar";
saldría un albol similar a esto

{
  "type": "Program", // la raiz de todo
  "start": 0,
  "end": 16,
  "body": [  // cuerpo del programa
    {
      "type": "VariableDeclaration",
      "start": 0,
      "end": 16,
      "declarations": [
        {
          "type": "VariableDeclarator",
          "start": 4,
          "end": 15,
          "id": {
            "type": "Identifier",
            "start": 4,
            "end": 7,
            "name": "foo"
          },
          "init": {
            "type": "Literal",
            "start": 10,
            "end": 15,
            "value": "bar",
            "raw": "\"bar\""
          }
        }
      ],
      "kind": "let"
    }
  ],
  "sourceType": "module"
}


## si hacemos esto en AST Explorer podemos hacer esto

https://astexplorer.net/

const pi = 3.1416;

// Variables contsntes
// Variables que guarden un número

// el nombre de la constante debe estar en UPPERCASE

## con esto podemos crear una regla para que las constatntes solo lleven el nombre en mayuscula

export default function(context) {
  return {
    VariableDeclaration(node){
      // tipo de variable const
      if(node.kind === "const"){
        const declaration = node.declarations[0];
        
        // Asegurarnos que es un número
        if(typeof declaration.init.value === "number"){
          
          // Aseguramos que la constante esté en UPPERCASE
          if(declaration.id.name !== declaration.id.name.toUpperCase()){
            context.report({
              node: declaration.id,
              message: "El nombre de la constante debe estar en mayuscula"
            })
          }
        }
      }
    }
  };
};


## podemos mejorarla haciendo un auto fix así

export default function(context) {
  return {
    VariableDeclaration(node){
      // tipo de variable const
      if(node.kind === "const"){
        const declaration = node.declarations[0];
        
        // Asegurarnos que es un número
        if(typeof declaration.init.value === "number"){
          
          // Aseguramos que la constante esté en UPPERCASE
          if(declaration.id.name !== declaration.id.name.toUpperCase()){
            context.report({
              node: declaration.id,
              message: "El nombre de la constante debe estar en mayuscula",
              fix: function(fixer){ // En el objeto creamos un item fix en donde le pasamos a la funcion un arreglador
                return fixer.replaceText(declaration.id, declaration.id.name.toUpperCase()) // lo arreglamos cambiando el texto original por el transformado
              }
            })
          }
        }
      }
    }
  };
};

## de salida optendremos algo así

// Lint rule not fired.

// Fixed output follows:
// --------------------------------------------------------------------------------
const PI = 3.1416;

const HALF_PI = 1.57075;
// Variables contsntes
// Variables que guarden un número

// el nombre de la constante debe estar en UPPERCASE

https://astexplorer.net/#/gist/858c735393dbf9628f6da13be421d9ff/37dd37c493ecd3735020223129e600e79dde199c